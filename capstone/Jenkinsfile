pipeline {
    agent any

    parameters {
        choice(name: 'ENVIRONMENT', choices: ['dev', 'test', 'prod'], description: 'Select deployment environment')
        string(name: 'AWS_CREDENTIALS_ID', defaultValue: 'aws1', description: 'AWS Credentials ID in Jenkins')
        choice(name: 'Destroy', choices: ['yes', 'no'])
        string(name: 'app', defaultValue: 'dockers', description: 'App name')
    }

    environment {
        TERRAFORM_REPO = 'https://github.com/ChowdaryDinesh/DevOps.git'
        APP_REPO = 'https://github.com/ChowdaryDinesh/DevOps.git'
        SSH_PRIVATE_KEY = credentials('aws1_ssh')
        AWS_ACCESS_KEY_ID     = credentials('aws-access-key-id')
        AWS_SECRET_ACCESS_KEY = credentials('aws-secret-access-key')
        AWS_SESSION_TOKEN     = credentials('aws-session-token')
    }

    stages {
        stage('Clone Repositories') {
            steps {
                script {
                    // Clone Terraform code
                    git url: "${env.TERRAFORM_REPO}", branch: 'main'

                    
                }
            }
        }

        stage('Initialize Terraform') {
            steps {
                withCredentials([
                        [ $class: 'StringBinding', credentialsId: 'aws-access-key-id', variable: 'AWS_ACCESS_KEY_ID'],
                        [ $class: 'StringBinding', credentialsId: 'aws-secret-access-key', variable: 'AWS_SECRET_ACCESS_KEY' ],
                        [ $class: 'StringBinding', credentialsId: 'aws-session-token', variable: 'AWS_SESSION_TOKEN' ]
                    ]) {
                    dir('capstone/ec2_instance') {
                        sh 'terraform init'
                    }
                }
            }
        }

        stage('Apply Terraform') {
            when {
                expression { params.Destroy == 'no' }
            }
            steps {
               withCredentials([
                       [ $class: 'StringBinding', credentialsId: 'aws-access-key-id', variable: 'AWS_ACCESS_KEY_ID'],
                        [ $class: 'StringBinding', credentialsId: 'aws-secret-access-key', variable: 'AWS_SECRET_ACCESS_KEY' ],
                        [ $class: 'StringBinding', credentialsId: 'aws-session-token', variable: 'AWS_SESSION_TOKEN' ]
                    ]) {
                    dir('capstone/ec2_instance') {

                        // Execute Terraform apply command
                        sh "terraform apply -var='app=${params.app}' -auto-approve"
                    }
                }
            }
        }

        stage('Deploy Application') {
    when {
        expression { params.Destroy == 'no' }
    }
    steps {
        script {
            // Fetch EC2 instance IP from Terraform output
            def instance_ip = sh(script: 'terraform -chdir=capstone/ec2_instance output -raw public_ip', returnStdout: true).trim()
            
            // Connect to EC2 instance and deploy app
            sh "chmod 400 capstone/ec2_instance/Key.pem"
            sh """
            ssh -i capstone/ec2_instance/Key.pem -o StrictHostKeyChecking=no ubuntu@${instance_ip} 'bash -s' << 'EOF'
                if [ ! -d "/home/ubuntu/DevOps" ]; then
                    git clone https://github.com/ChowdaryDinesh/DevOps.git /home/ubuntu/DevOps
                fi
                cd /home/ubuntu/DevOps/capstone/sample_python
                sudo docker-compose -f docker-compose.yml up --scale 2 -d
            EOF
            """
            sh "rm capstone/ec2_instance/Key.pem"
        }
    }
}


        stage('Destroy Application') {
            when {
                expression { params.Destroy == 'yes' }
            }
            steps {
                script {
                    withCredentials([
                        [ $class: 'StringBinding', credentialsId: 'aws-access-key-id', variable: 'AWS_ACCESS_KEY_ID'],
                        [ $class: 'StringBinding', credentialsId: 'aws-secret-access-key', variable: 'AWS_SECRET_ACCESS_KEY' ],
                        [ $class: 'StringBinding', credentialsId: 'aws-session-token', variable: 'AWS_SESSION_TOKEN' ]
                    ]) {
                        try {
                            dir('capstone/ec2_instance') {
                                sh 'terraform destroy -auto-approve'
                            }
                        } catch (Exception e) {
                            // Handle any exceptions during Terraform destroy
                            echo "Failed to destroy resources: ${e.message}"
                            currentBuild.result = 'FAILURE'
                        }
                    }
                }
    }
}

    }

    post {
        always {
            echo 'Pipeline execution completed.'
        }
        success {
            echo 'Pipeline executed successfully.'
        }
        failure {
            echo 'Pipeline execution failed.'
        }
    }
}
